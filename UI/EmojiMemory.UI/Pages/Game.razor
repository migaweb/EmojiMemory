@page "/game"
@implements IDisposable
@inject NavigationManager NavigationManager
@inject EmojiMemory.UI.Application.Services.GameEngineService GameEngine
@inject EmojiMemory.UI.Application.Contracts.IEmojiRepository EmojiRepository
@using EmojiMemory.UI.Domain.Entities
@using EmojiMemory.UI.Domain.Enums
@using EmojiMemory.UI.Domain.ValueObjects

<PageTitle>Emoji Memory Match</PageTitle>

  <div class="game-container">
    @if (GameEngine.Session.State != GameState.NotStarted)
    {
      <div class="game-controls">
        <Timer />
        <PauseResumeButton />
      </div>
    }
    @if (GameEngine.Session.Board.Cards.Count <= 0)
    {
      <p>Loading game...</p>
    }
    else
    {
      <div class="game-grid" style="grid-template-columns: repeat(@Cols, 1fr);">
        @foreach (var card in GameEngine.Session.Board.Cards)
        {
          <button class="card @(card.State == CardState.Matched ? "matched" : "") @(card.State == CardState.FaceUp ? "flipped" : "")"
                  @onclick="@(() => OnCardClicked(card))">
            <span>@(card.State == CardState.FaceUp || card.State == CardState.Matched ? card.Emoji.Symbol : "‚ùì")</span>
          </button>
        }
      </div>
      @if (GameEngine.Session.State == GameState.Paused)
      {
        <PauseOverlayComponent />
      }
      @if (GameEngine.Session.State == GameState.Completed)
      {
        <GameOver OnPlayAgain="StartNewGame" OnBackToMenu="GoToMenu" />
      }
      }
  </div>

@code {
  [Parameter]
  [SupplyParameterFromQuery] public int Rows { get; set; } = 4;

  [Parameter]
  [SupplyParameterFromQuery] public int Cols { get; set; } = 4;

  private bool boardLocked = false;

  protected override void OnInitialized()
  {
    GameEngine.StateChanged += OnStateChanged;
    InitializeGame();
  }

  public void Dispose()
  {
    GameEngine.StateChanged -= OnStateChanged;
  }

  private void InitializeGame()
  {
    var totalCards = Rows * Cols;
    var emojis = EmojiRepository.GetEmojis()
      .OrderBy(_ => Guid.NewGuid())
      .Take(totalCards / 2);

    GameEngine.StartGame(new GridSize(Rows, Cols), emojis);
  }

  private async Task OnCardClicked(Card clicked)
  {
    if (boardLocked ||
        GameEngine.Session.State != GameState.InProgress ||
        clicked.State != CardState.FaceDown)
    {
      return;
    }

    GameEngine.FlipCard(clicked.Position);
    StateHasChanged();

    if (GameEngine.Session.Board.Cards.Count(c => c.State == CardState.FaceUp) == 2)
    {
      boardLocked = true;
      await Task.Delay(750);
      await GameEngine.EvaluateFlip();
      boardLocked = false;
      StateHasChanged();
    }
  }

  private void StartNewGame()
  {
    InitializeGame();
    StateHasChanged();
  }

  private void GoToMenu()
  {
    NavigationManager.NavigateTo("/");
  }

  private void OnStateChanged()
  {
    InvokeAsync(StateHasChanged);
  }
}
